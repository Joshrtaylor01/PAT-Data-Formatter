Following directions requrie PyInstaller to be installed on system.
This guide assumes some knowledge of this program
Further documenation can be found at https://pyinstaller.readthedocs.io/en/stable/usage.html
This can be used if you wish to edit the source code and rebuild an executable with more optimization


Note:
Two version of the code exist. 
main.py includes no output to the terminal and is most likely what majority of end users will want.
main-verbose.py does include some basic output stating what is happening, and might be interesting for some.
Because of this, if building main-verbose.py, using the -w option will just create a slightly larger and slower file for no real gain

Create a single file executable
pyinstaller -F -w --clean -n PAT-Formatter main.py
pyinstaller -F --clean -n PAT-Formatter main-verbose.py


If UPX is installed may have to specify path as sometimes it doesn't automatically search your $PATH
pyinstaller -F --upx-dir path/to/upx/ -w -n PAT-Formatter main.py

Some optimisation can be made using the following command, not sure how much it does but makes the file smaller
python -O -m PyInstaller -F --upx-dir path/to/upx -w -n PAT-Formatter main.py


If your system has a lot of python modules installed, it is worth using the --exclude-module flag to reduce the end size of the file.
In my experimentation the following packages can be removed and not affect fucntion
['scipy', 'matplotlib', 'tkinter', 'multiprocessing']
I'm sure there are more, but removing these made the file small enough for GitHub to allow me to upload.
